<class>
<keyword> class </keyword>
<identifier category='class' usage='definition'> PongGame </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<identifier category='class' usage='call'> PongGame </identifier>
<identifier category='STATIC' usage='definition' index='0'> instance </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier category='class' usage='call'> Bat </identifier>
<identifier category='FIELD' usage='definition' index='0'> bat </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier category='class' usage='call'> Ball </identifier>
<identifier category='FIELD' usage='definition' index='1'> ball </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='2'> wall </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier category='FIELD' usage='definition' index='3'> exit </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='4'> score </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='5'> lastWall </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='6'> batWidth </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier category='class' usage='call'> PongGame </identifier>
<identifier category='subroutine' usage='definition'> new </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Screen </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> clearScreen </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='6'> batWidth </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> bat </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> Bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> new </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 230 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='6'> batWidth </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> ball </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> Ball </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> new </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 253 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 222 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> ball </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> setDestination </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 400 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Screen </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> drawRectangle </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 238 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 240 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Output </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> moveCursor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Output </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Score: 0 </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='4'> score </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='2'> wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='5'> lastWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> dispose </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> dispose </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> ball </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> dispose </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Memory </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> deAlloc </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> newInstance </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='STATIC' usage='call' index='0'> instance </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> PongGame </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> new </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<identifier category='class' usage='call'> PongGame </identifier>
<identifier category='subroutine' usage='definition'> getInstance </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier category='STATIC' usage='call' index='0'> instance </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> run </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier category='VAR' usage='definition' index='0'> key </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='0'> key </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='0'> key </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> Keyboard </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> keyPressed </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> move </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> moveBall </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Sys </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> wait </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='0'> key </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 130 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> setDirection </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='0'> key </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 132 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> setDirection </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='0'> key </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 140 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='0'> key </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='0'> key </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> Keyboard </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> keyPressed </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> move </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> moveBall </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Sys </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> wait </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Output </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> moveCursor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 27 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Output </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Game Over </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> moveBall </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier category='VAR' usage='definition' index='1'> bouncingDirection </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='2'> batLeft </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='3'> batRight </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='4'> ballLeft </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='5'> ballRight </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='2'> wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> ball </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> move </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> wall </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> wall </identifier>
</term>
<symbol> = </symbol>
<term>
<identifier category='FIELD' usage='call' index='5'> lastWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='5'> lastWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> wall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='1'> bouncingDirection </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='2'> batLeft </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> getLeft </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='3'> batRight </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> getRight </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='4'> ballLeft </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> ball </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> getLeft </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='5'> ballRight </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> ball </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> getRight </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> wall </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='2'> batLeft </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier category='VAR' usage='call' index='5'> ballRight </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='3'> batRight </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='VAR' usage='call' index='4'> ballLeft </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier category='FIELD' usage='call' index='3'> exit </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='5'> ballRight </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='2'> batLeft </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='1'> bouncingDirection </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='4'> ballLeft </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='3'> batRight </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='1'> bouncingDirection </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='6'> batWidth </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='6'> batWidth </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> bat </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> setWidth </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier category='FIELD' usage='call' index='6'> batWidth </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='4'> score </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='4'> score </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Output </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> moveCursor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Output </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> printInt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier category='FIELD' usage='call' index='4'> score </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> ball </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> bounce </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier category='VAR' usage='call' index='1'> bouncingDirection </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
