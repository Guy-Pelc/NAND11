<class>
<keyword> class </keyword>
<identifier category='class' usage='definition'> Ball </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='0'> x </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='1'> y </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='2'> lengthx </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='3'> lengthy </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='4'> d </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='5'> straightD </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='6'> diagonalD </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier category='FIELD' usage='definition' index='7'> invert </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='8'> positivex </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='9'> positivey </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='10'> leftWall </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='11'> rightWall </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='12'> topWall </identifier>
<symbol> , </symbol>
<identifier category='FIELD' usage='definition' index='13'> bottomWall </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier category='FIELD' usage='definition' index='14'> wall </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier category='class' usage='call'> Ball </identifier>
<identifier category='subroutine' usage='definition'> new </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='0'> Ax </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='1'> Ay </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='2'> AleftWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='3'> ArightWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='4'> AtopWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='5'> AbottomWall </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='0'> Ax </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='1'> Ay </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='10'> leftWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='2'> AleftWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='11'> rightWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='3'> ArightWall </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='12'> topWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='4'> AtopWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='13'> bottomWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='5'> AbottomWall </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> dispose </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Memory </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> deAlloc </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> show </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Screen </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> setColor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> hide </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Screen </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> setColor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> draw </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='class' usage='call'> Screen </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> drawRectangle </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier category='subroutine' usage='definition'> getLeft </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier category='subroutine' usage='definition'> getRight </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> setDestination </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='6'> destx </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='7'> desty </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier category='VAR' usage='definition' index='0'> dx </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='1'> dy </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='2'> temp </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='2'> lengthx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='6'> destx </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='3'> lengthy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='7'> desty </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='0'> dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> Math </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> lengthx </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='1'> dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='class' usage='call'> Math </identifier>
<symbol> . </symbol>
<identifier category='subroutine' usage='call'> abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier category='FIELD' usage='call' index='3'> lengthy </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='7'> invert </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='0'> dx </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='VAR' usage='call' index='1'> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='7'> invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='2'> temp </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='0'> dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='0'> dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='1'> dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='1'> dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='2'> temp </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='8'> positivex </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='ARG' usage='call' index='7'> desty </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='9'> positivey </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='ARG' usage='call' index='6'> destx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='8'> positivex </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='ARG' usage='call' index='6'> destx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='9'> positivey </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='ARG' usage='call' index='7'> desty </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='4'> d </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier category='VAR' usage='call' index='1'> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier category='VAR' usage='call' index='0'> dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='5'> straightD </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier category='VAR' usage='call' index='1'> dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='6'> diagonalD </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='1'> dy </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier category='VAR' usage='call' index='0'> dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier category='subroutine' usage='definition'> move </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> hide </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='4'> d </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='4'> d </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='4'> d </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier category='FIELD' usage='call' index='5'> straightD </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='4'> d </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='4'> d </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier category='FIELD' usage='call' index='6'> diagonalD </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='9'> positivey </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='7'> invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='7'> invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='8'> positivex </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='7'> invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='7'> invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier category='FIELD' usage='call' index='10'> leftWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='10'> leftWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='FIELD' usage='call' index='11'> rightWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='11'> rightWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier category='FIELD' usage='call' index='12'> topWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='12'> topWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier category='FIELD' usage='call' index='13'> bottomWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='13'> bottomWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier category='subroutine' usage='definition'> bounce </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier category='ARG' usage='definition' index='8'> bouncingDirection </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier category='VAR' usage='definition' index='3'> newx </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='4'> newy </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='5'> divLengthx </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='6'> divLengthy </identifier>
<symbol> , </symbol>
<identifier category='VAR' usage='definition' index='7'> factor </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='5'> divLengthx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> lengthx </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='6'> divLengthy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='3'> lengthy </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='8'> bouncingDirection </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='7'> factor </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> lengthx </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='8'> bouncingDirection </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='2'> lengthx </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='ARG' usage='call' index='8'> bouncingDirection </identifier>
</term>
<symbol> = </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='7'> factor </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 20 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='7'> factor </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 506 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='6'> divLengthy </identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier category='VAR' usage='call' index='5'> divLengthx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier category='VAR' usage='call' index='7'> factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='6'> divLengthy </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier category='VAR' usage='call' index='5'> divLengthx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='1'> y </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier category='VAR' usage='call' index='7'> factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='14'> wall </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 250 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='5'> divLengthx </identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier category='VAR' usage='call' index='6'> divLengthy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier category='VAR' usage='call' index='7'> factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='5'> divLengthx </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier category='VAR' usage='call' index='6'> divLengthy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier category='FIELD' usage='call' index='0'> x </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier category='VAR' usage='call' index='7'> factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier category='subroutine' usage='call'> setDestination </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier category='VAR' usage='call' index='3'> newx </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier category='VAR' usage='call' index='4'> newy </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
